incarnation: scafi

_constants:
  exportInterval: &exportInterval 10
  programRate: &programRate 1.0
  gradientRetentionTime: &gradientRetentionTime 15
  simulationSeconds: &simulationSeconds 360

variables:
  random: &random
    min: 0
    max: 500
    step: 1
    default: 0
  devices:
    type: ArbitraryVariable
    parameters: [ 100, [ 100, 1000, 5000 ] ]
  computationalCost: &computationalCost
    type: ArbitraryVariable
    parameters: [ 1.0, [ 1.0, 3.0, 10.0 ] ]
  load: &loadType
    type: ArbitraryVariable
    parameters: [ 0, [ 0, 1 ] ] # 0 = constant, 1 = variable
  network:
    type: ArbitraryVariable
    parameters: [ "lobster", [ "barabasi", "lobster" ] ]
  actualNetwork: &actualNetwork
    language: kotlin
    formula: |
      mapOf(
          "barabasi" to listOf(devices, "BarabasiAlbert", 3),
          "lobster" to listOf(devices, "Lobster", 4, 20)
      )[network]
  behavior:
    type: ArbitraryVariable
    parameters: [ "advanced", [ "advanced", "simple" ] ]
  actualBehaviour: &actualBehavior
    language: kotlin
    formula: |
      mapOf(
          "advanced" to listOf("it.unibo.pulverization.load.AdvancedLoadBasedReconfiguration", 10.0),
          "simple" to listOf("it.unibo.pulverization.load.SimpleLoadBasedReconfiguration", 10.0),
      )[behavior]

seeds:
  scenario: *random
  simulation: *random

_reactions:
  - program: &thickDevice
      - time-distribution:
          type: ExponentialTime
          parameters: [ *programRate ]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [ "it.unibo.pulverization.devices.ThickHost" ]
  - program: &program
      - time-distribution:
          type: ExponentialTime
          parameters: [ *programRate, 1 ]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: *actualBehavior
      - program: send

network-model:
  - type: CloudLinkingRule

deployments:
  type: GraphStreamDeployment
  parameters: *actualNetwork
  programs:
    - *program
    - *thickDevice
  contents:
    - molecule: "loadType"
      concentration: *loadType
    - molecule: "simulationTime"
      concentration: *simulationSeconds
    - molecule: "gradientRetentionTime"
      concentration: *gradientRetentionTime

environment:
  type: Continuous2DEnvironment
  parameters: [ ]
  global-programs:
    - time-distribution:
        type: Trigger
        parameters: [ 0 ]
      type: ComputeCentrality
      parameters: [ 0, *computationalCost ]

export:
  - type: CSVExporter
    parameters:
      exportPath: "data"
      fileNameRoot: "load_based"
      interval: *exportInterval
    data:
      - type: Time
        parameters:
          precision: 5
      - molecule: "canOffload"
        aggregators: [ sum ]
        value-filter: onlyfinite
      - molecule: "wantToOffload"
        aggregators: [ sum ]
        value-filter: onlyfinite
      - type: it.unibo.pulverization.QosExporter
        parameters:
          precision: 5
      - molecule: "effectiveLoad"
        aggregators: [ mean, max, min ]
        value-filter: onlyfinite
      - molecule: "load"
        aggregators: [ mean ]
        value-filter: onlyfinite
      - molecule: "latency"
        aggregators: [ mean, max, min ]
        value-filter: onlyfinite

terminate:
  - type: AfterTime
    parameters: [ *simulationSeconds ]
