incarnation: scafi

_constants:
  secondsInOneDay: &secondsInOneDay 86400
  exportInterval: &exportInterval 10
  programRate: &programRate 1.0
  retentionTime: &retentionTime 15.0

variables:
  random: &random
    min: 0
    max: 5
    step: 1
    default: 0
  devices:
    min: 100
    max: 200
    step: 50
    default: 100
  leadersCount: &leadersCount
    min: 5
    max: 10
    step: 1
    default: 5
  computationalCost: &computationalCost
    type: ArbitraryVariable
    parameters: [ 1.0, [ 0.5, 3.0, 10.0 ] ]
  network:
    type: ArbitraryVariable
    parameters:
      - ["Lobster", 2, 15]
      - ["BarabasiAlbert", 3]
  networkConfig: &networkConfig
    formula: |
      listOf(devices) + network
    language: kotlin
  reconfigurationStrategy: &reconfigurationStrategy
    type: ArbitraryVariable
    parameters:
      - ["it.unibo.pulverization.load.SimpleLoadBasedReconfiguration", *retentionTime]
      - ["it.unibo.pulverization.load.IntermediateLoadBasedReconfiguration", *retentionTime]
      - ["it.unibo.pulverization.load.AdvancedLoadBasedReconfiguration", *retentionTime]

seeds:
  scenario: *random
  simulation: *random

_reactions:
  - program: &thickDevice
      - time-distribution:
          type: ExponentialTime
          parameters: [ *programRate ]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [ "it.unibo.pulverization.devices.ThickDevice" ]
  - program: &program
    - time-distribution:
        type: ExponentialTime
        parameters: [*programRate]
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: *reconfigurationStrategy
    - program: send

deployments: ## i.e, how to place nodes
  type: GraphStreamDeployment
  parameters: *networkConfig
  programs: # the reactions installed in each node
    - *program
    - *thickDevice

environment:
  type: Continuous2DEnvironment
  parameters: []
  global-programs:
    - time-distribution:
        type: Trigger
        parameters: [ 0 ]
      type: ComputeCentrality
      parameters: [*leadersCount, *computationalCost]

export:
  - type: CSVExporter
    parameters:
      exportPath: "data"
      fileNameRoot: "load_based_reconfiguration"
      interval: *exportInterval
    data:
      - type: Time
        parameters:
          precision: 5
      - molecule: "isThickHost"
        aggregators: [ sum ]
      - molecule: "load"
        aggregators: [ mean ]
      - molecule: "canOffload"
        aggregators: [ sum ]
      - molecule: "wantToOffload"
        aggregators: [ sum ]
      - molecule: "effectiveLoad"
        aggregators: [ mean, max, min ]
terminate:
  - type: AfterTime
    parameters: [ *secondsInOneDay ]
