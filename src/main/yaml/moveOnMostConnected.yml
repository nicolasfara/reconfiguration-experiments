incarnation: scafi

variables:
  random: &random
    min: 0
    max: 5
    step: 1
    default: 2
  devices: &devices
    min: 100
    max: 200
    step: 50
    default: 100
  thickHosts: &thickHosts
    language: scala
    formula: |
      import scala.util.Random
      val rand = new Random(random.asInstanceOf[Double].toInt)
      (0 to 10 map { _ => rand.nextInt(100) }).toList
  capacities: &capacities
    language: scala
    formula: |
      import scala.util.Random
      val rand = new Random(random.asInstanceOf[Double].toInt)
      val dev = devices.asInstanceOf[Double].toInt
      (0 to dev map { _ => rand.nextInt(dev) }).toList

_constants:
  source: &source 100
  programRate: &programRate 1.0
  retentionTime: &retentionTime 15.0

seeds:
  scenario: *random
  simulation: *random

#network-model:
#  type: ConnectWithinDistance # *connectionType
#  parameters: [*range]

_reactions:
  - program: &setupDevice
      - time-distribution:
          type: Trigger
          parameters: 0
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [ it.unibo.pulverization.common.SetupNode ]
      - program: send
  - program: &program
    - time-distribution:
        type: ExponentialTime
        parameters: [*programRate]
      type: Event
      actions:
        - type: RunScafiProgram
          parameters: [it.unibo.pulverization.MoveOnMostConnected, *retentionTime]
    - program: send

deployments: ## i.e, how to place nodes
#  type: Grid
#  parameters: [ 0, 0, 10, 10, 1, 1, 0.5, 0.5 ]
  type: GraphStreamDeployment
  parameters: [*devices, "Lobster", 2, 15]
  programs: ## the reactions installed in each node
    - *program
    - *setupDevice
  contents:
    - molecule: isThickHostList
      concentration: *thickHosts
    - molecule: capacities
      concentration: *capacities
